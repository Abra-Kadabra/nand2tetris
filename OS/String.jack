// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str;
    field int length;
    field int max;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let str = Array.new(1);
        } else {
            let str = Array.new(maxLength);
        }
        let max = maxLength;
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Array.dispose(str);
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j < 0 | j > length) {
             do Sys.error(15); // 15 String.charAt String index out of bounds
        }
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j > length) {
             do Sys.error(16); // 16 String.setCharAt String index out of bounds 
        }
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length = max) {
             do Sys.error(17); // 17 String.appendChar String is full
        }
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length = 0) {
             do Sys.error(18); // 18 String.eraseLastChar String is empty
        }
        let str[length - 1] = 0;
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var boolean neg;
        var int i, res;
        let i = 0;
        let neg = false;
        if (str[i] = 45) {
            let neg = true;
            let i = 1;
        }
        let res = 0;
        while (i < length) { 
            if (str[i] > 47 & str[i] < 58) {
                let res = (res * 10) + (str[i] - 48);
                let i = i + 1;
            } else {
                let i = length;      // при находжении НЕ цифры - прекращаем конвертацию
            }
        }
        if (neg) {
            let res = -res;
        }
        return res;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var Array s;
        var int dim;
        let s = Array.new(6);                              // максимальная размерность 5 плюс знак
        let length = 0;                                    // "обнуляем" текущую строку
        let dim = 0;
        if (val < 0) {
            do appendChar(45);                             // 45 = -
            let val = -val;
        }
        while (val > 9) {
            let s[dim] = (48 + val - ((val / 10) * 10));   // 48 = 0 ... 57 = 9
            let val = val/10;
            let dim = dim + 1;
        }
        let s[dim] = 48 + val;
        while (dim > -1) {
            do appendChar(s[dim]);
            let dim = dim - 1;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
